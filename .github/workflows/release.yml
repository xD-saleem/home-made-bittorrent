
name: Tests Runner

on: [push, pull_request]

jobs:
  build:
    name: Build on ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-latest
            vcpkg_triplet: x64-linux-release
            out_name: main-linux
          - os: macos-latest
            vcpkg_triplet: x64-osx-release
            out_name: main-macos

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: vcpkg build
        uses: johnwason/vcpkg-action@v6
        with:
          manifest-dir: ${{ github.workspace }}
          token: ${{ github.token }}
          triplet: ${{ matrix.config.vcpkg_triplet }}
          cache-key: ${{ matrix.config.os }}
          revision: master
          github-binarycache: true

      - name: Build
        run: |
          cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE=Release
          make
          mv build/main ${{ matrix.config.out_name }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config.out_name }}
          path: ${{ matrix.config.out_name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List files for debugging
        run: ls -R artifacts

      - name: Tag Version
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ github.token }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/heads/')
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          files: |
            artifacts/main-linux/main-linux
            artifacts/main-macos/main-macos


  # TODO windows build
  # windows-test:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       config:
  #       - os: windows-2019
  #         vcpkg_triplet: x64-windows-release
  #         github-binarycache: false
  #   defaults:
  #     run:
  #       shell: pwsh
  #   name: Test for build on windows-latest
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: ilammy/msvc-dev-cmd@v1
  #     - uses: johnwason/vcpkg-action@v6
  #       with:
  #         manifest-dir: ${{ github.workspace }}
  #         triplet: x64-windows-static
  #         token: ${{ github.token }}
  #         github-binarycache: true
  #
  #     # Step 1: Checkout the code
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #
  #     # Step 2: Install dependencies via vcpkg
  #     - name: vcpkg build
  #       uses: johnwason/vcpkg-action@v6
  #       id: vcpkg
  #       with:
  #         manifest-dir: ${{ github.workspace }} # Directory containing vcpkg.json
  #         token: ${{ github.token }}  # GitHub token for authentication
  #         triplet: ${{ matrix.config.vcpkg_triplet }}
  #         cache-key: ${{ matrix.config.os }}
  #         revision: master
  #         github-binarycache: true
  #
  #     # Step 3: Build the project using CMake and Make
  #     - name: Configure CMake with Ninja
  #       run: |
  #         cmake -B build -S . `
  #           -G "Ninja" `
  #           -DCMAKE_TOOLCHAIN_FILE="${env:GITHUB_WORKSPACE}/vcpkg/scripts/buildsystems/vcpkg.cmake" `
  #           -DCMAKE_EXPORT_COMPILE_COMMANDS=1 `
  #           -DCMAKE_BUILD_TYPE=Release
  #       shell: pwsh
  #
  #     # - name: Build with Ninja
  #     #   run: cmake --build build
  #     #   shell: pwsh
  #
  #     # Step 4: Run the tests
  #     - name: Test
  #       run: ls build
  #       env:
  #         CMAKE_GENERATOR: "Ninja"
  #         CMAKE_TOOLCHAIN_FILE: "${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
  #         SKBUILD_CMAKE_ARGS: "-DVCPKG_TARGET_TRIPLET=x64-windows-static;-DVCPKG_MANIFEST_MODE=OFF"
