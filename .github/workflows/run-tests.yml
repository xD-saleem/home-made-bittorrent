
name: Tests Runner

on: [push, pull_request]

jobs:
  linux-macos-test:
    strategy:
      fail-fast: false
      matrix:
        config:
        - os: ubuntu-latest
          vcpkg_triplet: x64-linux-release
          github-binarycache: false
        - os: macos-latest
          vcpkg_triplet: x64-osx-release
          github-binarycache: false

    name: Test for on ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    steps:
      # Step 1: Checkout the code
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Install dependencies via vcpkg
      - name: vcpkg build
        uses: johnwason/vcpkg-action@v6
        id: vcpkg
        with:
          manifest-dir: ${{ github.workspace }} # Directory containing vcpkg.json
          token: ${{ github.token }}  # GitHub token for authentication
          triplet: ${{ matrix.config.vcpkg_triplet }}
          cache-key: ${{ matrix.config.os }}
          revision: master
          github-binarycache: true

      # Step 3: Build the project using CMake and Make
      - name: build
        run: |
          cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE=Release
          make
          echo "successfully built"
        working-directory: build

      # Step 4: Run the tests
      - name: Test
        run: make ci-tests

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config.os }}-build
          path: |
            build/**/*
            !build/CMakeFiles/**

      release:
        name: Create GitHub Release
        runs-on: ubuntu-latest
        needs: linux-macos-test
        steps:
          - name: Checkout
            uses: actions/checkout@v4

          - name: Download build artifacts (if you uploaded them earlier)
            uses: actions/download-artifact@v4
            with:
              path: ./artifacts

          - name: Create GitHub Release
            uses: softprops/action-gh-release@v1
            with:
              tag_name: ${{ github.ref_name }}
              name: Release ${{ github.ref_name }}
              files: ./artifacts/**/*
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # TODO windows build
  # windows-test:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       config:
  #       - os: windows-2019
  #         vcpkg_triplet: x64-windows-release
  #         github-binarycache: false
  #   defaults:
  #     run:
  #       shell: pwsh
  #   name: Test for build on windows-latest
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: ilammy/msvc-dev-cmd@v1
  #     - uses: johnwason/vcpkg-action@v6
  #       with:
  #         manifest-dir: ${{ github.workspace }}
  #         triplet: x64-windows-static
  #         token: ${{ github.token }}
  #         github-binarycache: true
  #
  #     # Step 1: Checkout the code
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #
  #     # Step 2: Install dependencies via vcpkg
  #     - name: vcpkg build
  #       uses: johnwason/vcpkg-action@v6
  #       id: vcpkg
  #       with:
  #         manifest-dir: ${{ github.workspace }} # Directory containing vcpkg.json
  #         token: ${{ github.token }}  # GitHub token for authentication
  #         triplet: ${{ matrix.config.vcpkg_triplet }}
  #         cache-key: ${{ matrix.config.os }}
  #         revision: master
  #         github-binarycache: true
  #
  #     # Step 3: Build the project using CMake and Make
  #     - name: Configure CMake with Ninja
  #       run: |
  #         cmake -B build -S . `
  #           -G "Ninja" `
  #           -DCMAKE_TOOLCHAIN_FILE="${env:GITHUB_WORKSPACE}/vcpkg/scripts/buildsystems/vcpkg.cmake" `
  #           -DCMAKE_EXPORT_COMPILE_COMMANDS=1 `
  #           -DCMAKE_BUILD_TYPE=Release
  #       shell: pwsh
  #
  #     - name: Build with Ninja
  #       run: cd build && ninja
  #       shell: pwsh
  #
  #     # Step 4: Run the tests
  #     - name: Test
  #       run: ls build
  #       env:
  #         CMAKE_GENERATOR: "Ninja"
  #         CMAKE_TOOLCHAIN_FILE: "${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
  #         SKBUILD_CMAKE_ARGS: "-DVCPKG_TARGET_TRIPLET=x64-windows-static;-DVCPKG_MANIFEST_MODE=OFF"
